# GenAI Vanilla Stack - Unified Docker Compose Configuration
# Consolidates all services with SOURCE-based configuration management

networks:
  backend-network:
    name: ${PROJECT_NAME}-network
    driver: bridge

# Consolidated volumes from all services
volumes:
  # Data layer volumes
  supabase-db-data:
    name: ${PROJECT_NAME}-supabase-db-data
    driver: local
  redis-data:
    name: ${PROJECT_NAME}-redis-data
    driver: local
  graph-db-data:
    name: ${PROJECT_NAME}-graph-db-data
    driver: local
  supabase-storage-data:
    name: ${PROJECT_NAME}-supabase-storage-data
    driver: local

  # AI layer volumes
  llm-provider-data:
    name: ${PROJECT_NAME}-llm-provider-data
    driver: local
  local-deep-researcher-data:
    name: ${PROJECT_NAME}-local-deep-researcher-data
    driver: local
  searxng-data:
    name: ${PROJECT_NAME}-searxng-data
    driver: local
  n8n-data:
    name: ${PROJECT_NAME}-n8n-data
    driver: local
  comfyui-models:
    name: ${PROJECT_NAME}-comfyui-models
    driver: local
  comfyui-output:
    name: ${PROJECT_NAME}-comfyui-output
    driver: local
  comfyui-input:
    name: ${PROJECT_NAME}-comfyui-input
    driver: local
  comfyui-custom-nodes:
    name: ${PROJECT_NAME}-comfyui-custom-nodes
    driver: local

  # App layer volumes
  open-web-ui-data:
    name: ${PROJECT_NAME}-open-web-ui-data
    driver: local
  backend-data:
    name: ${PROJECT_NAME}-backend-data
    driver: local

  # Vector layer volumes
  weaviate-data:
    name: ${PROJECT_NAME}-weaviate-data
    driver: local
  weaviate-shared-config:
    name: ${PROJECT_NAME}-weaviate-shared-config
    driver: local

services:
  # =============================================================================
  # DATA LAYER SERVICES (Always Container)
  # =============================================================================
  
  supabase-db:
    image: ${SUPABASE_DB_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${SUPABASE_DB_USER}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: ${SUPABASE_DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./supabase/db/snapshot:/snapshot
    ports:
      - "${SUPABASE_DB_PORT}:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SUPABASE_DB_USER} -d ${SUPABASE_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: ${REDIS_IMAGE}
    container_name: ${PROJECT_NAME}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT}:6379"
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend-network

  supabase-db-init:
    image: ${SUPABASE_DB_INIT_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-db-init
    restart: "no"
    environment:
      PGHOST: supabase-db
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      PGDATABASE: ${SUPABASE_DB_NAME}
    volumes:
      - ./supabase/db/scripts:/scripts
    entrypoint: ["/scripts/db-init-runner.sh"]
    depends_on:
      supabase-db:
        condition: service_healthy
    networks:
      - backend-network

  supabase-meta:
    image: ${SUPABASE_META_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-meta
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${SUPABASE_DB_NAME}
      PG_META_DB_USER: ${SUPABASE_DB_USER}
      PG_META_DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
    ports:
      - "${SUPABASE_META_PORT}:8080"
    networks:
      - backend-network

  supabase-storage:
    image: ${SUPABASE_STORAGE_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-storage
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      JWT_SECRET: ${SUPABASE_JWT_SECRET}
      ANON_KEY: ${SUPABASE_ANON_KEY}
      SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      REGION: ${STORAGE_REGION}
      FILE_SIZE_LIMIT: ${STORAGE_FILE_SIZE_LIMIT}
      STORAGE_BACKEND: ${STORAGE_BACKEND}
      FILE_STORAGE_PATH: /var/lib/storage
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: ${TENANT_ID}
      PROJECT_REF: ${PROJECT_REF}
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      POSTGREST_URL: http://supabase-api:3000
      GOTRUE_URL: http://supabase-auth:9999
    ports:
      - "${SUPABASE_STORAGE_PORT}:5000"
    volumes:
      - supabase-storage-data:/var/lib/storage
    networks:
      - backend-network

  supabase-auth:
    image: ${SUPABASE_AUTH_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-auth
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    environment:
      GOTRUE_SITE_URL: http://supabase-studio:3000
      API_EXTERNAL_URL: http://supabase-auth:9999
      GOTRUE_DB_DRIVER: postgres
      DB_NAMESPACE: auth
      GOTRUE_DB_DATABASE_URL: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      GOTRUE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
      GOTRUE_MAILER_URLPATHS_INVITE: "/invite"
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: "/confirm"
      GOTRUE_MAILER_URLPATHS_RECOVERY: "/recover"
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/email-change"
      GOTRUE_SMTP_HOST: "localhost"
      GOTRUE_SMTP_PORT: 1025
      GOTRUE_SMTP_USER: ""
      GOTRUE_SMTP_PASS: ""
      GOTRUE_SMTP_SENDER_NAME: "Supabase Auth"
      GOTRUE_SMTP_ADMIN_EMAIL: "admin@example.com"
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_SITE_NAME: "Local Supabase"
    ports:
      - "${SUPABASE_AUTH_PORT}:9999"
    networks:
      - backend-network

  supabase-api:
    image: ${SUPABASE_API_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-api
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
    environment:
      PGRST_DB_URI: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      PGRST_DB_SCHEMA: "public,storage,auth"
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - "${SUPABASE_API_PORT}:3000"
    networks:
      - backend-network

  supabase-realtime:
    image: ${SUPABASE_REALTIME_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-realtime
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
    environment:
      # Database connection
      DB_HOST: supabase-db
      DB_PORT: 5432
      DB_NAME: ${SUPABASE_DB_NAME}
      DB_USER: ${SUPABASE_DB_USER}
      DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
      # Replication configuration
      DB_SLOT: supabase_realtime_slot
      DB_CHANNEL_ENABLED: "true"
      # JWT configuration
      JWT_SECRET: ${SUPABASE_JWT_SECRET}
      JWT_ROLE: service_role
      # Server configuration
      PORT: 4000
      REPLICATION_MODE: RLS
      SECURE_CHANNELS: "true"
      # Additional configuration
      IP_VERSION: ipv4
      # Required Phoenix/Erlang configuration
      SECRET_KEY_BASE: ${SUPABASE_JWT_SECRET}
      RLIMIT_NOFILE: 65536
      ERL_AFLAGS: "-proto_dist inet_tcp"
      HOSTNAME: supabase-realtime
      # Disable libcluster completely for single-node Docker setup
      LIBCLUSTER_STRATEGY: "Cluster.Strategy.Gossip"
      LIBCLUSTER_TOPOLOGIES: '[]'
      APP_NAME: realtime
    ports:
      - "${SUPABASE_REALTIME_PORT}:4000"
    networks:
      - backend-network

  neo4j-graph-db:
    build:
      context: ./graph-db
      args:
        BASE_IMAGE: ${NEO4J_GRAPH_DB_IMAGE}
    container_name: ${PROJECT_NAME}-neo4j-graph-db
    restart: unless-stopped
    deploy:
      replicas: ${NEO4J_SCALE:-1}
    environment:
      NEO4J_AUTH: ${GRAPH_DB_AUTH}
      NEO4J_server_default__advertised__address: "neo4j-graph-db"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_browser_remote__content__hostname__whitelist: "*"
    ports:
      - "${GRAPH_DB_PORT}:7687"
      - "${GRAPH_DB_DASHBOARD_PORT}:7474"
    volumes:
      - ./graph-db/scripts:/scripts
      - ./graph-db/snapshot:/snapshot
      - graph-db-data:/data
    networks:
      - backend-network

  # =============================================================================
  # AI LAYER SERVICES (SOURCE Configurable)
  # =============================================================================

  ollama:
    image: ${LLM_PROVIDER_IMAGE}
    container_name: ${PROJECT_NAME}-ollama
    restart: unless-stopped
    volumes:
      - llm-provider-data:/root/.ollama
    ports:
      - "${LLM_PROVIDER_PORT}:11434"
    environment:
      NVIDIA_VISIBLE_DEVICES: ${OLLAMA_NVIDIA_VISIBLE_DEVICES:-all}
    deploy:
      replicas: ${OLLAMA_SCALE:-1}
    networks:
      - backend-network

  ollama-pull:
    image: ${OLLAMA_PULL_IMAGE}
    container_name: ${PROJECT_NAME}-ollama-pull
    restart: "no"
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      PGHOST: supabase-db
      PGPORT: 5432
      PGDATABASE: ${SUPABASE_DB_NAME}
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      OLLAMA_HOST_URL: ${OLLAMA_ENDPOINT:-http://ollama:11434}
    volumes:
      - ./ollama-pull/scripts:/scripts
    entrypoint: ["/scripts/pull.sh"]
    deploy:
      replicas: ${OLLAMA_PULL_SCALE:-1}
    networks:
      - backend-network

  comfyui-init:
    image: ${COMFYUI_INIT_IMAGE}
    container_name: ${PROJECT_NAME}-comfyui-init
    restart: "no"
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      ollama-pull:
        condition: service_completed_successfully
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      PGHOST: supabase-db
      PGPORT: 5432
      PGDATABASE: ${SUPABASE_DB_NAME}
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      COMFYUI_MODELS_PATH: /models
      COMFYUI_HOST_URL: ${COMFYUI_ENDPOINT:-http://comfyui:18188}
      IS_LOCAL_COMFYUI: ${IS_LOCAL_COMFYUI:-false}
      COMFYUI_MODEL_SET: ${COMFYUI_MODEL_SET:-minimal}
    volumes:
      - ./comfyui-init/scripts:/scripts
      - comfyui-models:/models
    entrypoint: ["/scripts/download_models.sh"]
    deploy:
      replicas: ${COMFYUI_INIT_SCALE:-1}
    networks:
      - backend-network

  local-deep-researcher:
    build:
      context: ./local-deep-researcher
      args:
        BASE_IMAGE: ${LOCAL_DEEP_RESEARCHER_IMAGE}
    container_name: ${PROJECT_NAME}-local-deep-researcher
    restart: unless-stopped
    deploy:
      replicas: ${LOCAL_DEEP_RESEARCHER_SCALE:-1}
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      searxng:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      # Database connection for LLM config
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      # LLM Provider connection (adapts to source)
      LLM_PROVIDER_BASE_URL: ${OLLAMA_ENDPOINT:-http://ollama:11434}
      # Search configuration
      SEARCH_API: ${LOCAL_DEEP_RESEARCHER_SEARCH_API:-searxng}
      SEARXNG_URL: http://searxng:8080
      MAX_WEB_RESEARCH_LOOPS: ${LOCAL_DEEP_RESEARCHER_LOOPS:-3}
      # Worker configuration
      LOCAL_DEEP_RESEARCHER_WORKERS: ${LOCAL_DEEP_RESEARCHER_WORKERS:-3}
    ports:
      - "${LOCAL_DEEP_RESEARCHER_PORT}:2024"
    volumes:
      - local-deep-researcher-data:/app/data
    networks:
      - backend-network

  searxng:
    image: ${SEARXNG_IMAGE}
    container_name: ${PROJECT_NAME}-searxng
    restart: unless-stopped
    deploy:
      replicas: ${SEARXNG_SCALE:-1}
    networks:
      - backend-network
    ports:
      - "${SEARXNG_PORT}:8080"
    volumes:
      - ./searxng/config:/etc/searxng:rw
      - searxng-data:/var/cache/searxng
    environment:
      - SEARXNG_BASE_URL=http://localhost:${SEARXNG_PORT}
      - SEARXNG_SECRET=${SEARXNG_SECRET}
      - FORCE_OWNERSHIP=1
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  n8n:
    image: ${N8N_IMAGE}
    container_name: ${PROJECT_NAME}-n8n
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    deploy:
      replicas: ${N8N_SCALE:-1}
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: supabase-db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${SUPABASE_DB_NAME}
      DB_POSTGRESDB_USER: ${SUPABASE_DB_USER}
      DB_POSTGRESDB_PASSWORD: ${SUPABASE_DB_PASSWORD}
      DB_POSTGRESDB_SCHEMA: n8n
      DB_SCHEMA: n8n
      N8N_HOST: n8n.localhost
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      N8N_PROXY_HOPS: 1
      N8N_PUSH_BACKEND: websocket
      VUE_APP_URL_BASE_API: http://n8n.localhost:${KONG_HTTP_PORT}/
      GENERIC_TIMEZONE: ${TZ:-UTC}
      N8N_EDITOR_BASE_URL: http://n8n.localhost:${KONG_HTTP_PORT}
      N8N_ALLOW_CONNECTIONS_FROM: http://n8n.localhost:${KONG_HTTP_PORT}
      WEBHOOK_URL: http://n8n.localhost:${KONG_HTTP_PORT}/
      NODE_ENV: development
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_AUTH_ENABLED: ${N8N_AUTH_ENABLED:-true}
      N8N_SECURE_COOKIE: false
      N8N_RUNNERS_ENABLED: true
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true
      N8N_COMMUNITY_PACKAGES_ENABLED: ${N8N_COMMUNITY_PACKAGES_ENABLED:-true}
      N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE: ${N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE:-true}
      NODE_OPTIONS: --max_old_space_size=512
      EXECUTIONS_MODE: ${N8N_EXECUTIONS_MODE:-queue}
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      QUEUE_BULL_REDIS_DB: 0
      QUEUE_HEALTH_CHECK_ACTIVE: true
      OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS: true
    ports:
      - "${N8N_PORT}:5678"
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - backend-network

  n8n-worker:
    image: ${N8N_IMAGE}
    container_name: ${PROJECT_NAME}-n8n-worker
    command: worker
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    deploy:
      replicas: ${N8N_WORKER_SCALE:-1}
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: supabase-db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${SUPABASE_DB_NAME}
      DB_POSTGRESDB_USER: ${SUPABASE_DB_USER}
      DB_POSTGRESDB_PASSWORD: ${SUPABASE_DB_PASSWORD}
      DB_POSTGRESDB_SCHEMA: n8n
      DB_SCHEMA: n8n
      NODE_ENV: development
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_RUNNERS_ENABLED: true
      EXECUTIONS_MODE: ${N8N_EXECUTIONS_MODE:-queue}
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      QUEUE_BULL_REDIS_DB: 0
      QUEUE_HEALTH_CHECK_ACTIVE: true
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - backend-network

  n8n-init:
    image: ${N8N_INIT_IMAGE:-alpine:latest}
    container_name: ${PROJECT_NAME}-n8n-init
    restart: "no"
    depends_on:
      n8n:
        condition: service_started
    deploy:
      replicas: ${N8N_INIT_SCALE:-1}
    environment:
      N8N_HOST: n8n
      N8N_PORT: 5678
      N8N_INIT_NODES: ${N8N_INIT_NODES:-n8n-nodes-comfyui,@ksc1234/n8n-nodes-comfyui-image-to-image,n8n-nodes-mcp}
    volumes:
      - ./n8n-init/scripts:/scripts
      - ./n8n-init/config:/config
      - n8n-data:/n8n-data
    networks:
      - backend-network
    entrypoint: ["/scripts/init-n8n.sh"]

  comfyui:
    image: ${COMFYUI_IMAGE}
    platform: ${COMFYUI_PLATFORM:-linux/amd64}
    container_name: ${PROJECT_NAME}-comfyui
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      supabase-storage:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - COMFYUI_ARGS=${COMFYUI_ARGS:---listen --cpu}
      - AUTO_UPDATE=${COMFYUI_AUTO_UPDATE:-false}
      - COMFYUI_PORT_HOST=8188
      - WEB_ENABLE_AUTH=false
      - ENABLE_QUICKTUNNEL=false
      - SERVERLESS=false
      - DISABLE_NATPMP=1
      - SUPABASE_URL=${COMFYUI_KONG_URL:-http://kong-api-gateway:8000}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_STORAGE_BUCKET=${COMFYUI_STORAGE_BUCKET:-comfyui-images}
      - COMFYUI_UPLOAD_TO_SUPABASE=${COMFYUI_UPLOAD_TO_SUPABASE:-true}
    ports:
      - "${COMFYUI_PORT}:18188"
    volumes:
      - comfyui-models:/opt/ComfyUI/models
      - comfyui-output:/opt/ComfyUI/output
      - comfyui-input:/opt/ComfyUI/input
      - comfyui-custom-nodes:/opt/ComfyUI/custom_nodes
      - ${COMFYUI_LOCAL_MODELS_PATH:-./empty}:/host_models
    deploy:
      replicas: ${COMFYUI_SCALE:-1}
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18188/system_stats"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    labels:
      - "com.${PROJECT_NAME}.service=image-generation"
      - "com.${PROJECT_NAME}.category=ai"
      - "com.${PROJECT_NAME}.dependencies=ollama,supabase-storage"

  # =============================================================================
  # VECTOR LAYER SERVICES
  # =============================================================================

  weaviate-init:
    image: ${WEAVIATE_INIT_IMAGE:-alpine:latest}
    container_name: ${PROJECT_NAME}-weaviate-init
    restart: "no"
    depends_on:
      supabase-db:
        condition: service_healthy
    deploy:
      replicas: ${WEAVIATE_INIT_SCALE:-1}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      PGHOST: supabase-db
      PGPORT: 5432
      PGDATABASE: ${SUPABASE_DB_NAME}
      PGUSER: ${SUPABASE_DB_USER}
      PGPASSWORD: ${SUPABASE_DB_PASSWORD}
      OLLAMA_ENDPOINT: ${OLLAMA_ENDPOINT:-http://ollama:11434}
    volumes:
      - ./weaviate-init/scripts:/scripts
      - weaviate-shared-config:/shared
    networks:
      - backend-network
    entrypoint: ["/scripts/init-weaviate.sh"]

  weaviate:
    image: ${WEAVIATE_IMAGE}
    container_name: ${PROJECT_NAME}-weaviate
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
      weaviate-init:
        condition: service_completed_successfully
      multi2vec-clip:
        condition: service_started
    deploy:
      replicas: ${WEAVIATE_SCALE:-1}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-ollama'
      ENABLE_MODULES: 'text2vec-ollama,text2vec-openai,multi2vec-clip,generative-ollama,generative-openai'
      CLUSTER_HOSTNAME: 'weaviate'
      OLLAMA_ENDPOINT: ${OLLAMA_ENDPOINT:-http://ollama:11434}
      OPENAI_APIKEY: ${OPENAI_API_KEY:-}
      CLIP_INFERENCE_API: 'http://multi2vec-clip:8080'
    entrypoint: ["/scripts/configure-weaviate.sh", "/bin/weaviate", "--host", "0.0.0.0", "--port", "8080", "--scheme", "http"]
    ports:
      - "${WEAVIATE_PORT}:8080"
      - "${WEAVIATE_GRPC_PORT}:50051"
    volumes:
      - weaviate-data:/var/lib/weaviate
      - weaviate-shared-config:/shared
      - ./weaviate-init/scripts:/scripts
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  multi2vec-clip:
    image: ${MULTI2VEC_CLIP_IMAGE}
    container_name: ${PROJECT_NAME}-multi2vec-clip
    restart: unless-stopped
    depends_on:
      supabase-db:
        condition: service_healthy
    environment:
      ENABLE_CUDA: ${CLIP_ENABLE_CUDA:-0}
    deploy:
      replicas: ${CLIP_SCALE:-1}
    networks:
      - backend-network

  # =============================================================================
  # APPLICATION LAYER SERVICES
  # =============================================================================

  supabase-studio:
    image: ${SUPABASE_STUDIO_IMAGE}
    container_name: ${PROJECT_NAME}-supabase-studio
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      supabase-meta:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
      supabase-realtime:
        condition: service_started
      kong-api-gateway:
        condition: service_started
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      SUPABASE_URL: http://kong-api-gateway:8000
      SUPABASE_PUBLIC_URL: http://localhost:${KONG_HTTP_PORT}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      DEFAULT_ORGANIZATION_NAME: ${PROJECT_NAME}
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      AUTH_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
    ports:
      - "${SUPABASE_STUDIO_PORT}:3000"
    healthcheck:
      test: ["CMD-SHELL", "node -e 'require(\"net\").createConnection({port:3000,host:\"localhost\"},()=>process.exit(0)).on(\"error\",()=>process.exit(1))'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - backend-network

  kong-api-gateway:
    container_name: ${PROJECT_NAME}-kong-api-gateway
    image: ${KONG_API_GATEWAY_IMAGE}
    restart: unless-stopped
    ports:
      - ${KONG_HTTP_PORT}:8000/tcp
      - ${KONG_HTTPS_PORT}:8443/tcp
    volumes:
      - ./volumes/api/kong-dynamic.yml:/home/kong/kong.yml:ro,z
    depends_on:
      redis:
        condition: service_started
      supabase-auth:
        condition: service_started
      supabase-api:
        condition: service_started
      supabase-realtime:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-meta:
        condition: service_started
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth,rate-limiting
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      # SSE-compatible settings
      KONG_NGINX_PROXY_PROXY_BUFFERING: "off"
      KONG_NGINX_PROXY_PROXY_CACHE: "off"
      KONG_NGINX_PROXY_CHUNKED_TRANSFER_ENCODING: "on"
      KONG_NGINX_PROXY_TCP_NOPUSH: "on"
      KONG_NGINX_PROXY_TCP_NODELAY: "on"
      KONG_NGINX_PROXY_KEEPALIVE_TIMEOUT: "300"
      # WebSocket support
      KONG_NGINX_HTTP_UPSTREAM_KEEPALIVE: "16"
      KONG_NGINX_HTTP_UPSTREAM_KEEPALIVE_REQUESTS: "100"
      KONG_NGINX_HTTP_UPSTREAM_KEEPALIVE_TIMEOUT: "60s"
      # Proxy timeouts (in seconds)
      KONG_PROXY_READ_TIMEOUT: "300"
      KONG_PROXY_SEND_TIMEOUT: "300"
      KONG_REDIS_HOST: redis
      KONG_REDIS_PORT: 6379
      KONG_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    networks:
      - backend-network

  open-web-ui:
    image: ${OPEN_WEB_UI_IMAGE}
    container_name: ${PROJECT_NAME}-open-web-ui
    restart: unless-stopped
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      supabase-realtime:
        condition: service_started
      supabase-storage:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      replicas: ${OPEN_WEB_UI_SCALE:-1}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      OLLAMA_BASE_URL: ${OLLAMA_ENDPOINT:-http://ollama:11434}
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      WEBUI_SECRET_KEY: ${OPEN_WEB_UI_SECRET_KEY}
      COMFYUI_BASE_URL: ${COMFYUI_ENDPOINT:-http://comfyui:18188}
      ENABLE_IMAGE_GENERATION: true
      # WebSocket Redis Integration
      ENABLE_WEBSOCKET_SUPPORT: "true"
      WEBSOCKET_MANAGER: "redis"
      WEBSOCKET_REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/2"
      REDIS_KEY_PREFIX: "openwebui"
      MODEL_LIST_CACHE_TTL: "300"
    volumes:
      - open-web-ui-data:/app/backend/data
      - ./open-webui/tools:/app/backend/data/tools
    ports:
      - "${OPEN_WEB_UI_PORT}:8080"
    networks:
      - backend-network

  backend:
    build:
      context: ./backend
      args:
        BASE_IMAGE: ${BACKEND_IMAGE}
    container_name: ${PROJECT_NAME}-backend
    restart: unless-stopped
    deploy:
      replicas: ${BACKEND_SCALE:-1}
    depends_on:
      supabase-db-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
      supabase-storage:
        condition: service_started
      supabase-realtime:
        condition: service_started
      kong-api-gateway:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      PROJECT_NAME: ${PROJECT_NAME}
      KONG_URL: http://kong-api-gateway:8000
      DATABASE_URL: postgresql://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      OLLAMA_BASE_URL: ${OLLAMA_ENDPOINT:-http://ollama:11434}
      NEO4J_URI: ${NEO4J_URI:-bolt://neo4j-graph-db:7687}
      NEO4J_USER: ${GRAPH_DB_USER}
      NEO4J_PASSWORD: ${GRAPH_DB_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      N8N_BASE_URL: http://n8n:5678
      COMFYUI_BASE_URL: ${COMFYUI_ENDPOINT:-http://comfyui:18188}
      COMFYUI_ENABLED: true
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      # Vector database integration
      WEAVIATE_URL: ${WEAVIATE_URL:-http://weaviate:8080}
      WEAVIATE_ENABLED: true
    volumes:
      - ./backend/app:/app
      - backend-data:/app/data
      - weaviate-shared-config:/shared
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - backend-network