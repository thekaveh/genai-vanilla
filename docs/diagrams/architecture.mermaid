graph LR
    %% This diagram represents the unified SOURCE-based Docker Compose architecture.
    %% All services are defined in single docker-compose.yml file
    %% Services are dynamically configured via SOURCE variables in .env.example
    %% The start.sh script parses bootstrapper/service-configs.yml and generates environment variables
    %% Services can run as: container-cpu, container-gpu, localhost, external, api, or disabled

    %% Define styles
    classDef database fill:#a5d8ff,stroke:#1971c2,color:#1e1e1e
    classDef cache fill:#f8d7da,stroke:#dc3545,color:#1e1e1e
    classDef ai fill:#f5d0fe,stroke:#9c36b5,color:#1e1e1e
    classDef ui fill:#ffd8a8,stroke:#e8590c,color:#1e1e1e
    classDef api fill:#b2f2bb,stroke:#2f9e44,color:#1e1e1e
    classDef config fill:#e7f5ff,stroke:#339af0,color:#1e1e1e
    
    %% Configuration Layer
    subgraph ConfigLayer[Configuration Layer]
        direction TB
        env-example[.env.example<br/>SOURCE Variables]:::config
        service-configs[bootstrapper/service-configs.yml<br/>Service Matrix]:::config
        start-sh[start.sh<br/>YAML Parser & Env Generator]:::config
    end

    %% Data Services Layer (Always Container)
    subgraph DataLayer[Data Layer - Always Container]
        direction LR
        supabase-db[supabase-db]:::database
        redis[redis<br/>DB 0: n8n queues, Backend<br/>DB 1: SearxNG caching<br/>DB 2: Open-WebUI WebSocket]:::cache
        supabase-db-init(supabase-db-init):::database
        subgraph SupabaseCore[Supabase Core Services]
            direction TB
            supabase-meta[supabase-meta]:::database
            supabase-storage[supabase-storage]:::database
            supabase-auth[supabase-auth]:::database
            supabase-api[supabase-api]:::api
            supabase-realtime[supabase-realtime]:::api
        end
        neo4j-graph-db[neo4j-graph-db]:::database
    end

    %% AI Services Layer (SOURCE Configurable)
    subgraph AILayer[AI Layer - SOURCE Configurable]
        direction TB
        subgraph OllamaServices[LLM_PROVIDER_SOURCE Options]
            ollama-container[Ollama Container<br/>CPU/GPU]:::ai
            ollama-localhost[host.docker.internal:11434<br/>Localhost]:::ai
            ollama-api[OpenAI/Anthropic APIs<br/>External]:::ai
        end
        subgraph ComfyUIServices[COMFYUI_SOURCE Options]
            comfyui-container[ComfyUI Container<br/>CPU/GPU]:::ai
            comfyui-localhost[host.docker.internal:8000<br/>Localhost]:::ai
        end
        ollama-pull[ollama-pull]:::ai
        comfyui-init[comfyui-init]:::ai
        local-deep-researcher[local-deep-researcher]:::ai
        n8n[n8n - Workflow Engine]:::api
        n8n-worker[n8n-worker - Queue Worker]:::api
        n8n-init[n8n-init]:::api
        searxng[searxng - Search Engine]:::api
    end
    
    %% Vector Services Layer (SOURCE Configurable)
    subgraph VectorLayer[Vector Layer - SOURCE Configurable]
        direction TB
        weaviate-init[weaviate-init]:::database
        weaviate[weaviate - Vector DB<br/>Adapts to Ollama SOURCE]:::database
        subgraph MultiVecServices[VECTOR_SOURCE Options]
            multi2vec-clip-cpu[Multi2Vec CLIP<br/>CPU]:::ai
            multi2vec-clip-gpu[Multi2Vec CLIP<br/>GPU]:::ai
        end
    end
    
    %% Application Services Layer (Always Container)
    subgraph AppLayer[Application Layer - Always Container]
        direction TB
        kong-api-gateway[Kong API Gateway<br/>Centralized Routing]:::api
        backend[Backend API<br/>Adapts to AI Services]:::api
        open-web-ui[Open-WebUI<br/>Chat Interface]:::ui
        supabase-studio[Supabase Studio<br/>Database Admin]:::ui
        jupyterhub[JupyterHub<br/>Data Science IDE<br/>Adapts to AI Services]:::ui
    end
    
    %% Configuration Flow
    env-example -- "SOURCE Variables" --> start-sh
    service-configs -- "Service Matrix" --> start-sh
    start-sh -- "Generated Environment Variables" --> docker-compose[docker-compose.yml<br/>Unified Service Definition]:::config

    %% Core Dependencies
    supabase-db -- "Database Ready" --> supabase-db-init
    supabase-db-init -- "Initialization Complete" --> DataLayer
    supabase-db-init -- "Initialization Complete" --> AILayer
    supabase-db-init -- "Initialization Complete" --> VectorLayer
    supabase-db-init -- "Initialization Complete" --> AppLayer

    %% Adaptive Service Connections
    %% Services automatically adapt to configured SOURCE types
    AILayer -- "LLM Connections" --> AppLayer
    VectorLayer -- "Vector Search" --> AppLayer
    kong-api-gateway -- "Centralized Routing" --> AppLayer
    
    %% Key Features of New Architecture:
    %% 1. Single docker-compose.yml with all service definitions  
    %% 2. SOURCE-based dynamic configuration via environment variables
    %% 3. YAML-driven service matrix in bootstrapper/service-configs.yml
    %% 4. Automatic extra_hosts for localhost connectivity
    %% 5. GPU/CPU variants handled via deploy.resources
    %% 6. Services scale to 0 when disabled via deploy.replicas
    
    %% SOURCE Configuration Reference
    subgraph SourceNotes[SOURCE Configuration Options]
        direction TB
        ContainerNote[container-cpu/container-gpu: Docker containers with CPU/GPU]:::config
        LocalhostNote[localhost: Services on host machine via host.docker.internal]:::config
        ExternalNote[external: Connect to external service URLs]:::config
        ApiNote[api: Cloud API services (OpenAI, Anthropic, etc.)]:::config
        DisabledNote[disabled: Service not started (scale=0)]:::config
    end
    
    %% Styling
    class supabase-db,neo4j-graph-db,weaviate database
    class supabase-meta,supabase-storage,supabase-auth database
    class supabase-api,supabase-realtime,kong-api-gateway,n8n,n8n-worker,searxng,backend api
    class ollama-container,ollama-localhost,ollama-api,comfyui-container,comfyui-localhost,local-deep-researcher,multi2vec-clip-cpu,multi2vec-clip-gpu ai
    class open-web-ui,supabase-studio,jupyterhub ui
